name: CI CD Pipeline

on:
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]
  #  paths-ignore: [".vscode/**", "README.md", ".*"]
  workflow_dispatch:

env:
  GITHUB_WORKING_DIRECTORY: './'
  IIS_WEBAPP_PATH: 'C:\inetpub\wwwroot\evat-workflow-api'      
  DOTNET_VERSION: '6.0.x'
 
jobs:
  Build:
    runs-on: psl-app-vm3
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET Core ‚öôÔ∏è‚öôÔ∏è
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies ‚õëÔ∏è‚õëÔ∏è
        working-directory: ${{ env.GITHUB_WORKING_DIRECTORY }}
        run: dotnet restore
      
      - name: Build with dotnet ‚öíÔ∏è‚öíÔ∏è
        working-directory: ${{ env.GITHUB_WORKING_DIRECTORY }}
        run: dotnet build --configuration Release --no-restore 

      - name: Publish ü¶çü¶ç
        working-directory: ${{ env.GITHUB_WORKING_DIRECTORY }}
        run: dotnet publish --configuration Release --property:PublishDir='${{ env.GITHUB_WORKING_DIRECTORY }}/publish'
        
      - name: Upload a Build Artifact ‚§¥Ô∏è‚§¥Ô∏è 
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: '${{ env.GITHUB_WORKING_DIRECTORY }}/publish'

  #test:
  #  needs: Build
  #  runs-on: psl-app-vm3
  #  steps:
  #  - name: Running a Unit Test üîçüîé
  #    run: echo running a test on build # dotnet test src\AspNetCoreAPI-GitHubAction.Test
      
  #AutoMerge:
  #  name: Merge pull request
  #  runs-on: psl-app-vm3
  #  needs: [Build]
  #  if: github.base_ref == 'master' && github.actor == 'dependabot[bot]'
  #  steps:
  #      - name: Merge
  #        uses: actions/github-script@0.2.0
  #        with:
  #         script: |
  #          github.pullRequests.merge({
  #              owner: context.payload.repository.owner.login,
  #              repo: context.payload.repository.name,
  #              pull_number: context.payload.pull_request.number
  #          })
  #         github-token: ${{ github.token }}

  #linter:
  #  needs: [Build]
  #  permissions:
  #    contents: read
  #    packages: read
  #    statuses: write
  #  uses: vbem/reusable/.github/workflows/superlinter.yml@v1
    
  DeployDev:
    name: Deploy to IIS Dev (APP-VM3)
    if: github.event_name != 'pull_request'
    needs: [Build]
    runs-on: psl-app-vm3
    environment: 
      name: Development
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Take application offline
        run: New-Item -Type File -Name app_offline.htm -Path ${{ env.IIS_WEBAPP_PATH }} -Force
        
      - name: Set Offline HTML file
        run: Set-Content ${{ env.IIS_WEBAPP_PATH }}\app_offline.htm 'Site Under Maintenance'

      - name: Download new binaries over the top of the app
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{ env.IIS_WEBAPP_PATH }}
  
      - name: Bring the app back online
        run: Remove-Item ${{ env.IIS_WEBAPP_PATH }}\app_offline.htm

  # DeployStaging1:
  #   name: Deploy to IIS Staging (QA-1)
  #   if: github.event.ref == 'refs/heads/master'
  #   needs: [Build]
  #   runs-on: psl-app-vm3
  #   environment: 
  #     name: Staging
  #     url: 'http://test.myapp.com'
  #   steps:
  #     - name: Deploy
  #       uses: rasmusbuchholdt/simply-web-deploy@2.1.0 
  #       with:
  #         website-name: ${{ secrets.WEBSITE_NAME }}
  #         server-computer-name: ${{ secrets.SERVER_NAME }}
  #         server-username: ${{ secrets.SERVER_USERNAME }}
  #         server-password: ${{ secrets.SERVER_PASSWORD }}
        
  # DeployStaging2:
  #   name: Deploy to IIS Staging (QA-2)
  #   if: github.event.ref == 'refs/heads/master'
  #   needs: [DeployDev]
  #   runs-on: psl-app-vm3
  #   environment: 
  #     name: Staging
  #     url: 'http://test.myapp.com'
  #   steps:
  #     - name: Deploy
  #       uses: rasmusbuchholdt/simply-web-deploy@2.1.0 
  #       with:
  #         website-name: ${{ secrets.WEBSITE_NAME }}
  #         server-computer-name: ${{ secrets.SERVER_NAME }}
  #         server-username: ${{ secrets.SERVER_USERNAME }}
  #         server-password: ${{ secrets.SERVER_PASSWORD }}
        
  # DeployProd:
  #   name: Deploy to IIS Production 
  #   needs: [DeployStaging1, DeployStaging2]
  #   runs-on: psl-app-vm3
  #   environment: 
  #     name: Production
  #     url: 'http://www.myapp.com'
  #   steps:
  #     - name: Deploy
  #       uses: rasmusbuchholdt/simply-web-deploy@2.1.0 
  #       with:
  #         website-name: ${{ secrets.WEBSITE_NAME }}
  #         server-computer-name: ${{ secrets.SERVER_NAME }}
  #         server-username: ${{ secrets.SERVER_USERNAME }}
  #         server-password: ${{ secrets.SERVER_PASSWORD }}
